{"version":3,"sources":["components/outputScreen.js","components/App.js","index.js"],"names":["OutputScreen","props","className","answer","formula","App","Container","fluid","React","Component","Calculator","handleClick","event","temp","state","isNaN","length","lastEle","result","calculation","setState","point","substr","operand","rpn","this","RPN","console","log","digits","forEach","ele","num1","pop","num2","push","parseFloat","priority","operandStack","split","element","i","definition","colorAndShape","Button","variant","onClick","renderKeypad","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.724dc14c.chunk.js","sourcesContent":["import React from 'react';\n\nconst OutputScreen = (props) => {\n    return (\n        <div>\n            <div className=\"computation mb-3 d-flex align-items-center justify-content-end\">\n            <div>{props.answer}</div>\n            </div>\n            <div className=\"formula mb-3 d-flex align-items-center justify-content-end\">\n                <div>{props.formula}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default OutputScreen;\n","import React from 'react';\nimport { Container, Button } from 'react-bootstrap'; \nimport OutputScreen from './outputScreen';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Container fluid className=\"d-flex vh-100 justify-content-center align-items-center bg-light\">\n                <Calculator/>\n            </Container>\n        );\n    }\n} \n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formula: '', \n            answer:'', \n            point: false,　\n            operand: false,\n            lastEle: '',\n        }\n    }\n\n    handleClick = (event) => {\n        let temp = this.state.formula;\n        if (isNaN(event) && temp.length === 0) return ;\n        else if (event === '=' && isNaN(this.state.lastEle)) return ;\n        else if (event === '=') {\n            let result = this.calculation(this.state.formula);\n            temp = '';\n            this.setState({\n                answer: result,\n            })\n        }\n        else if (event === 'AC') {\n            temp = '';\n        }\n        else if (event === '.') {\n            if (!isNaN(this.state.lastEle) && !this.state.point) {\n                temp += event;\n                this.setState({\n                    point: true,\n                })\n            }\n        }\n        else if (isNaN(event)) {\n            if (isNaN(this.state.lastEle) && this.state.lastEle !== '.' ) {\n                temp = temp.substr(0, temp.length - 3) + ` ${event} `;\n            }\n            else if (this.state.lastEle !== '.'){\n                temp += ` ${event} `;\n                this.setState({\n                    point: false,\n                })\n            }\n        }\n        else {\n            temp += event;\n        }\n\n        this.setState({\n            formula: temp,\n            lastEle: event !== 'AC' ? event : this.state.lastEle,\n        })\n    }\n\n    calculation(formula) {\n        const rpn = this.RPN(formula);\n        console.log(rpn);\n\n        let digits = [];\n        rpn.forEach(ele => {\n            if (isNaN(ele)) {\n                let num1 = digits.pop();\n                let num2 = digits.pop();\n                switch (ele) {\n                    case '+':\n                        digits.push(num2 + num1);\n                        break;\n                    case '-':\n                        digits.push(num2 - num1);\n                        break;\n                    case '×':\n                        digits.push(num2 * num1);\n                        break;\n                    case '÷':\n                        digits.push(num2 / num1);\n                        break;                        \n                    case '%':\n                        digits.push(num2 % num1);\n                        break;                        \n                    default:\n                        break;\n                }\n            }\n            else {\n                digits.push(parseFloat(ele));\n            }\n        });\n        console.log(digits);\n        return digits[0];\n    }\n\n    RPN(formula) {\n        const priority = {\n            '+' : 1,\n            '-' : 1,\n            '×' : 2,\n            '÷' : 3,\n            '%' : 4,\n        }\n        let operandStack = [];\n        let rpn = [];\n        formula.split(' ').forEach(element => {\n            if (isNaN(element)) {\n                if (operandStack.length <= 0) {\n                    operandStack.push(element);\n                }\n                else if (priority[operandStack[operandStack.length-1]] < priority[element]){\n                    operandStack.push(element);\n                }\n                else {\n                    while (operandStack.length && priority[operandStack[operandStack.length-1]] >= priority[element]){\n                        rpn.push(operandStack.pop());\n                    }\n                    operandStack.push(element);\n                }\n            }\n            if (!isNaN(element)) {\n                rpn.push(element); \n            }\n        });\n        while (operandStack.length) {\n            rpn.push(operandStack.pop());\n        }\n        return rpn;\n    }\n\n\n    renderKeypad(i) {\n        let definition = '';\n        let colorAndShape = 'outline-info ';\n        if (i === 'AC' || i === '0') {\n            definition = 'm-2 zero';\n            colorAndShape += ' rounded-pill ';\n        }\n        else {\n            definition = 'm-2';\n            colorAndShape += ' rounded-circle ';\n        }\n        return (\n            <Button className={definition} variant={colorAndShape}\n                onClick={() => this.handleClick(i)}>\n                {i}\n            </Button>\n        )\n    }\n\n    render() {\n        return  (\n            <div>\n                <OutputScreen answer={this.state.answer} formula={this.state.formula}/>\n                <div className=\"d-flex\">\n                    {this.renderKeypad('AC')}\n                    {this.renderKeypad('%')}\n                    {this.renderKeypad('÷')}\n                </div>\n                <div className=\"d-flex\">\n                    {this.renderKeypad('7')}\n                    {this.renderKeypad('8')}\n                    {this.renderKeypad('9')}\n                    {this.renderKeypad('×')}\n                </div>\n                <div className=\"d-flex\">\n                    {this.renderKeypad('4')}\n                    {this.renderKeypad('5')}\n                    {this.renderKeypad('6')}\n                    {this.renderKeypad('-')}\n                </div>\n                <div className=\"d-flex\">\n                    {this.renderKeypad('1')}\n                    {this.renderKeypad('2')}\n                    {this.renderKeypad('3')}\n                    {this.renderKeypad('+')}\n                </div>\n                <div className=\"d-flex\">\n                    {this.renderKeypad('0')}\n                    {this.renderKeypad('.')}\n                    {this.renderKeypad('=')}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}